syntax = "proto3";
import "google/protobuf/any.proto";
package api;

option go_package = "api/";


//=============================服务区域 Begin ==================================
service PimServer {
  //  通知事件模块
  rpc UpdateEvent (TokenReq) returns (stream UpdateEventDataType);
  //  鉴权模块
  //  注册用户
  rpc Register(RegisterReq) returns (BaseOk) ;
  //  登录换取token
  rpc Login(LoginReq) returns (LoginResp) ;
  //   用户模块
  //  获取我的用户信息
  rpc GetMyUserInfo(StreamReq) returns (UserInfoViewerDataType);
  //  通过id 获取用户信息
  rpc GetUserInfoByID(GetUserInfoByIDReq) returns (UserInfoViewerDataType);
  //  添加用户到通讯录
  rpc AddUserToContact(AddUserToContactReq) returns (BaseOk);

  //  修改用户名
  rpc UserUpdateUsername(UserUpdateInfoReq) returns (BaseOk);
  rpc UserUpdateNick(UserUpdateInfoReq) returns (BaseOk);
  rpc UserUpdateAvatar(UserUpdateInfoReq) returns (BaseOk);

  // 消息模块
  rpc SendMessage(SendMessageReq) returns (SendMessageResp);
  // 创建一个聊天 到聊天列表
  rpc CrateChat(UserIDReq) returns (ChatInfoDataType);

  //   创建群
  rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp);
  // 通过群id 入群
  rpc GroupJoinByID(GroupJoinByIDReq) returns (BaseOk);
  //  邀请新成员
  rpc GroupInviteMembers(GroupInviteMembersReq) returns (BaseOk);
  // 修改群通知
  rpc GroupEditNotification(GroupEditNotificationReq) returns(BaseOk);
  //  移除群成员
  rpc GroupRemoveMembers(GroupRemoveMembersReq) returns (BaseOk);

}
//=============================服务区域 End ==================================


//=========================== 通用结构区 Begin =========================================
// 登录的Token
message TokenReq {
  string Token = 1 ;
}

// 流请求 只有一个流信息
// 流是再 UpdateEvent 链接成功后向客户端推送的 一个唯一标识这个数据流的id
// 使用流可以找到上下文
// 风险就是 别人拿到流id 之后就能伪造用户信息 , 类似jwt token 一样, 目前不处理这方面的安全问题

message StreamReq {
  int64 StreamID = 1; // 使用int64 检索 可以比字符快且数据包更小
}


// 只有一个 user id 的结构 可能通用的
message UserIDReq {
  int64 StreamID = 1; // 使用int64 检索 可以比字符快且数据包更小
  int64 UserID = 2 ;
}

// 空数据 一样代表成功
message BaseOk {
  int64  Code = 1 ; // 可以为空 特殊接口可以使用code 设置处理方法
}


// 凡是和聊天相关的都会用到相同的聊天信息结构
message ChatInfoDataType {
  int64 chat_id = 1 ;
  int64 my_user_id = 2 ;
  string chat_name = 3;
  string chat_title = 4;
  int64 last_update_time = 5;
  int64 last_msg_id = 6;

}

//=========================== 通用结构区 END =========================================

//=========================== 事件定义区 Begin =========================================

// 推送的事件信息
message UpdateEventDataType {
  //   数据包类型 类似 mod type  , sub type 用于定位类型的解析
  //  这些都是通知的事件
  enum Type {
    Unknown = 0;
    ConnectSuccess = 1 ;
    ConnectFail = 2 ;
    NewMessage = 3 ;
    KickDevice = 4 ;
    UpdateUserInfo = 5 ;
    NewChatInfo = 6 ;
    // 根据实践 这两个接口并入 NewMessage 里面
    //    UpdateGroupNewMember = 7 ; // 新成员加入事件
    //    UpdateGroupNotification = 8; // 群通知变更事件

  }

  Type type = 1 ;
  // 这个body 需要通过不同的类型进行处理
  // 前期使用官方的 any 封包 , 后期使用bytes 处理
  // 使用 any 虽然方便操作 , 但是 数据包会变大很多,
  //  {
  //  "type": "NewMessage",
  //  "body": {
  //    "type_url": "type.googleapis.com/api.Message",
  //    "value": {
  //      "type": "Buffer",
  //      "data": [...]
  //    }
  //  }
  //}
  // 如果数据包很小 type_url 部分的内容占据了 大量的空间 前期开发提高效率直接使用 这个方式处理
  google.protobuf.Any body = 2 ;
}
//
// 参考群通知事件类型
//message UpdateGroupNotificationDataType {
//  int64 FromID = 1 ; // 修改者的id
//  string Notification = 2 ;
//  int64 UpdatedAt = 3;
//}


message UpdateGroupNewMemberDataType{
  //  string NewMemberNick = 1;
  //  string MemberNick = 1; //已经说明是 新成员了 可以不需要再加New 了 , 实际情况暂时用不到这个数据
  int64 UpdatedAt = 2;
  int64 InvitedBy = 3;
  // TODO 推送新成员 也不通知对方成员的id ...
  int64 MemberID = 4 ;
  //  复用 消息可以再消息的数据库增加一个字段类型 , 这样 用户拉取消息的时候会客户端顺序才能再聊天框发现这个 事件
  int64 MessageID = 5 ;
}

message UpdateGroupRemoveMemberDataType {
  int64 UpdatedAt = 2;
  int64 ManagerID = 3;
  repeated int64 MemberID = 4 ;
  int64 MessageID = 5 ;
}

message ConnectSuccessDataType {
  int64 StreamID = 1;
}

message ConnectFailDataType {

}

message KickDeviceDataType {

}

message UpdateUserInfoDataType {
  UserInfoViewerDataType UserInfo = 1 ;
}

message NewChatInfoDataType {
  ChatInfoDataType ChatInfo = 1 ;
}
//=========================== 事件定义区 End =========================================


//=========================== 普通接口定义去 Begin =========================================




message RegisterReq {
  string Username = 1 ;
  string Password = 2 ;
  string Email = 3 ;
}


message LoginReq {
  enum LoginType {
    Unknown = 0 ;
    LoginByUsername = 1;
    EmailCode = 2 ;
    MobileCode = 3 ;
  }

  enum PlatformType {
    UnknownPlatform = 0 ;
    Android = 1 ;
    IOS = 2;
    Windows = 3 ;
    Darwin = 4 ;
    Grpc = 5 ;
    Web = 6 ;
  }


  LoginType Type = 1;
  PlatformType  Platform = 2;
  string Username = 3 ;
  string Password = 4 ;
  string Code = 5 ;
  //  string VerityCode = 6 ; //验证码暂时不用


}

message LoginResp {
  string Token = 1 ;
}
//	UserID     int64  `json:"user_id" gorm:"type:bigint;primarykey;comment:基础id"`
//	CreatedAt  int64  `json:"created_at" gorm:"autoCreateTime:milli"`
//	Username   string `json:"username"`
//	Nick       string `json:"nick"`
//	Email      string `json:"email" gorm:"unique"`
//	UserStatus int    `json:"user_status"`
//	UserType   int    `json:"user_type"`
//	Avatar     []byte `json:"avatar"`

enum UserStatusEnumType {
  UserStatusEnumTypeUnknown = 0 ;
}

enum UserTypeEnumType {
  UserTypeEnumTypeUnknown = 0 ;
}

enum GroupMemberUserEnumType {
  GroupMemberUserEnumTypeNormal = 0 ;// 普通用户
  GroupMemberUserEnumTypeAdmin = 1 ;// 管理者者
  GroupMemberUserEnumTypeCreator = 2 ;// 创建者

}

message UserInfoViewerDataType {
  int64 UserID = 1 ;
  int64 CreatedAt = 2 ;
  string Username = 3 ;
  string Nick = 4 ;
  string Email = 5 ;
  UserStatusEnumType UserStatus = 6 ;
  UserTypeEnumType UserType = 7;
  bytes Avatar = 8;
}


message GetUserInfoByIDReq {
  int64 StreamID = 1; // 这是必须的
  int64 UserID = 2 ;
}

message AddUserToContactReq {
  int64 StreamID = 1; // 这是必须的

  int64 UserID = 2 ;
  string Mobile = 3 ;
  string Note = 4 ;

  //  Mobile string `json:"mobile"`
  //  Note   string `json:"note"`
}

//	// chat 规则
//	// 0x01020304 1234  全局用户id
//	// 0x01020304 0000  公网用户id
//	// 0x00000000 1234  子网用户id
//	// -0x0112345678 0000 公网普通群
//	// -0x0100000000 1234 私网普通群
//	// -0x1012345678 0000 公网超级群
//	// -0x1000000000 1234 私网超级群
//	ChatID           int64             `json:"chat_id"` // 普通用户正数 ， 群负数 超级群 -100开头
//	MsgType          int               `json:"msg_type"`
//	Attach           []byte            `json:"attach"`
//	Body             []byte            `json:"body"`
//	AtUser           []int64           `json:"at_user"`
//	ReplyToMessageID int64             `json:"reply_to_message_id"`
//	ReplyInChatID    int64             `json:"reply_in_chat_id"`
//	Params           map[string]string `json:"params"`
message SendMessageReq {
  int64 StreamID = 1; // 这是必须的
  int64  ChatID = 2;


  int64 ReplyToMessageID = 3 ;
  int64 ReplyInChatID = 4 ;
  string MessageText = 5 ;// 这是文本消息 每个消息都会有文本的部分

  // Attach 被拆分成不同不同的子类型
  optional MessageTypeImage ImageContent = 6 ; // 可选类型 当消息类型是图片的时候会有图片信息
  //  map<string, string > Params = 7 ;
  google.protobuf.Any  Params = 7; // 使用泛型

  MessageTypeEnum Type = 8 ;
  repeated int64 AtUser = 9 ;
}

message MessageTypeImage {
  //  int64 RemoteFileID = 1 ; // 远程的id
  bytes ImageBuffer = 1 ; // 先只有buffer
}

enum MessageTypeEnum {
  MessageTypeUnknown = 0 ; // proto3 必须从0开始
  MessageTypeText = 1 ;
  MessageTypeEnumImage = 2 ;
  MessageTypeNewMember = 101 ;
  MessageTypeRemoveMember = 102 ;
  MessageTypeUpdateGroupNotification = 103 ;


}
//	SenderMsgStateSend    = 1
//	SenderMsgStateAck     = 2
//	SenderMsgStateSuccess = 3
//	SenderMsgStateFail    = 4
enum MessageStatusEnum {
  MessageStatusUnknown = 0 ;
  MessageStatusSend = 1 ;
  MessageStatusAck = 2 ;
  MessageStatusSuccess = 3 ;
  MessageStatusFail = 4 ;
}
// 消息数据类型
message Message {
  int64 ID = 1 ;
  int64 ChatID = 2;
  int64 ReplyToMessageID = 3 ;
  int64 ReplyInChatID = 4 ;
  string MessageText = 5 ;// 这是文本消息 每个消息都会有文本的部分
  // Attach 被拆分成不同不同的子类型
  optional MessageTypeImage ImageContent = 6 ; // 可选类型 当消息类型是图片的时候会有图片信息
  //  map<string, string > Params = 7 ;
  google.protobuf.Any  Params = 7; // 使用泛型
  MessageTypeEnum Type = 8 ;
  repeated int64 AtUser = 9 ;
  int64 CreatedAt = 10;
  int64 UpdatedAt = 11;
  int64 Sender = 12;
  MessageStatusEnum Status = 13 ;
}



message SendMessageResp {
  int64 ID = 1;
}


message CreateGroupReq {
  int64 StreamID = 1; // 这是必须的
  string Name = 2 ;
  repeated int64 Members = 3 ;
}

message CreateGroupResp {
  int64 GroupID = 1 ;
}

message GroupJoinByIDReq {
  int64 StreamID = 1; // 这是必须的
  int64 GroupID = 2 ;

}


message GroupInviteMembersReq {
  int64 StreamID = 1; // 这是必须的
  int64 GroupID = 2 ;
  repeated int64 Members = 3 ;

}

message GroupEditNotificationReq {
  int64 StreamID = 1; // 这是必须的
  int64 GroupID = 2 ;
  string Notification = 3 ;

}
message GroupRemoveMembersReq{
  int64 StreamID = 1; // 这是必须的
  int64 GroupID = 2 ;
  repeated int64 Members = 3 ;
}


message UserUpdateInfoReq {
  int64 StreamID = 1; // 这是必须的
  optional string Username = 2 ;
  optional string Nick = 3 ;
  optional bytes Avatar = 4 ;
}

//=========================== 普通接口定义去 End =========================================
