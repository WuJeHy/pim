// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.9
// source: api/pim.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserStatusEnumType int32

const (
	UserStatusEnumType_UserStatusEnumTypeUnknown UserStatusEnumType = 0
)

// Enum value maps for UserStatusEnumType.
var (
	UserStatusEnumType_name = map[int32]string{
		0: "UserStatusEnumTypeUnknown",
	}
	UserStatusEnumType_value = map[string]int32{
		"UserStatusEnumTypeUnknown": 0,
	}
)

func (x UserStatusEnumType) Enum() *UserStatusEnumType {
	p := new(UserStatusEnumType)
	*p = x
	return p
}

func (x UserStatusEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatusEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[0].Descriptor()
}

func (UserStatusEnumType) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[0]
}

func (x UserStatusEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatusEnumType.Descriptor instead.
func (UserStatusEnumType) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{0}
}

type UserTypeEnumType int32

const (
	UserTypeEnumType_UserTypeEnumTypeUnknown UserTypeEnumType = 0
)

// Enum value maps for UserTypeEnumType.
var (
	UserTypeEnumType_name = map[int32]string{
		0: "UserTypeEnumTypeUnknown",
	}
	UserTypeEnumType_value = map[string]int32{
		"UserTypeEnumTypeUnknown": 0,
	}
)

func (x UserTypeEnumType) Enum() *UserTypeEnumType {
	p := new(UserTypeEnumType)
	*p = x
	return p
}

func (x UserTypeEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserTypeEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[1].Descriptor()
}

func (UserTypeEnumType) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[1]
}

func (x UserTypeEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserTypeEnumType.Descriptor instead.
func (UserTypeEnumType) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{1}
}

type GroupMemberUserEnumType int32

const (
	GroupMemberUserEnumType_GroupMemberUserEnumTypeNormal  GroupMemberUserEnumType = 0 // 普通用户
	GroupMemberUserEnumType_GroupMemberUserEnumTypeAdmin   GroupMemberUserEnumType = 1 // 管理者者
	GroupMemberUserEnumType_GroupMemberUserEnumTypeCreator GroupMemberUserEnumType = 2 // 创建者
)

// Enum value maps for GroupMemberUserEnumType.
var (
	GroupMemberUserEnumType_name = map[int32]string{
		0: "GroupMemberUserEnumTypeNormal",
		1: "GroupMemberUserEnumTypeAdmin",
		2: "GroupMemberUserEnumTypeCreator",
	}
	GroupMemberUserEnumType_value = map[string]int32{
		"GroupMemberUserEnumTypeNormal":  0,
		"GroupMemberUserEnumTypeAdmin":   1,
		"GroupMemberUserEnumTypeCreator": 2,
	}
)

func (x GroupMemberUserEnumType) Enum() *GroupMemberUserEnumType {
	p := new(GroupMemberUserEnumType)
	*p = x
	return p
}

func (x GroupMemberUserEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMemberUserEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[2].Descriptor()
}

func (GroupMemberUserEnumType) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[2]
}

func (x GroupMemberUserEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMemberUserEnumType.Descriptor instead.
func (GroupMemberUserEnumType) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{2}
}

type MessageTypeEnum int32

const (
	MessageTypeEnum_MessageTypeUnknown                 MessageTypeEnum = 0 // proto3 必须从0开始
	MessageTypeEnum_MessageTypeText                    MessageTypeEnum = 1
	MessageTypeEnum_MessageTypeEnumImage               MessageTypeEnum = 2
	MessageTypeEnum_MessageTypeNewMember               MessageTypeEnum = 101
	MessageTypeEnum_MessageTypeUpdateGroupNotification MessageTypeEnum = 102
)

// Enum value maps for MessageTypeEnum.
var (
	MessageTypeEnum_name = map[int32]string{
		0:   "MessageTypeUnknown",
		1:   "MessageTypeText",
		2:   "MessageTypeEnumImage",
		101: "MessageTypeNewMember",
		102: "MessageTypeUpdateGroupNotification",
	}
	MessageTypeEnum_value = map[string]int32{
		"MessageTypeUnknown":                 0,
		"MessageTypeText":                    1,
		"MessageTypeEnumImage":               2,
		"MessageTypeNewMember":               101,
		"MessageTypeUpdateGroupNotification": 102,
	}
)

func (x MessageTypeEnum) Enum() *MessageTypeEnum {
	p := new(MessageTypeEnum)
	*p = x
	return p
}

func (x MessageTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[3].Descriptor()
}

func (MessageTypeEnum) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[3]
}

func (x MessageTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageTypeEnum.Descriptor instead.
func (MessageTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{3}
}

// SenderMsgStateSend    = 1
// SenderMsgStateAck     = 2
// SenderMsgStateSuccess = 3
// SenderMsgStateFail    = 4
type MessageStatusEnum int32

const (
	MessageStatusEnum_MessageStatusUnknown MessageStatusEnum = 0
	MessageStatusEnum_MessageStatusSend    MessageStatusEnum = 1
	MessageStatusEnum_MessageStatusAck     MessageStatusEnum = 2
	MessageStatusEnum_MessageStatusSuccess MessageStatusEnum = 3
	MessageStatusEnum_MessageStatusFail    MessageStatusEnum = 4
)

// Enum value maps for MessageStatusEnum.
var (
	MessageStatusEnum_name = map[int32]string{
		0: "MessageStatusUnknown",
		1: "MessageStatusSend",
		2: "MessageStatusAck",
		3: "MessageStatusSuccess",
		4: "MessageStatusFail",
	}
	MessageStatusEnum_value = map[string]int32{
		"MessageStatusUnknown": 0,
		"MessageStatusSend":    1,
		"MessageStatusAck":     2,
		"MessageStatusSuccess": 3,
		"MessageStatusFail":    4,
	}
)

func (x MessageStatusEnum) Enum() *MessageStatusEnum {
	p := new(MessageStatusEnum)
	*p = x
	return p
}

func (x MessageStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[4].Descriptor()
}

func (MessageStatusEnum) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[4]
}

func (x MessageStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageStatusEnum.Descriptor instead.
func (MessageStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{4}
}

//	数据包类型 类似 mod type  , sub type 用于定位类型的解析
//
// 这些都是通知的事件
type UpdateEventDataType_Type int32

const (
	UpdateEventDataType_Unknown        UpdateEventDataType_Type = 0
	UpdateEventDataType_ConnectSuccess UpdateEventDataType_Type = 1
	UpdateEventDataType_ConnectFail    UpdateEventDataType_Type = 2
	UpdateEventDataType_NewMessage     UpdateEventDataType_Type = 3
	UpdateEventDataType_KickDevice     UpdateEventDataType_Type = 4
	UpdateEventDataType_UpdateUserInfo UpdateEventDataType_Type = 5
	UpdateEventDataType_NewChatInfo    UpdateEventDataType_Type = 6
)

// Enum value maps for UpdateEventDataType_Type.
var (
	UpdateEventDataType_Type_name = map[int32]string{
		0: "Unknown",
		1: "ConnectSuccess",
		2: "ConnectFail",
		3: "NewMessage",
		4: "KickDevice",
		5: "UpdateUserInfo",
		6: "NewChatInfo",
	}
	UpdateEventDataType_Type_value = map[string]int32{
		"Unknown":        0,
		"ConnectSuccess": 1,
		"ConnectFail":    2,
		"NewMessage":     3,
		"KickDevice":     4,
		"UpdateUserInfo": 5,
		"NewChatInfo":    6,
	}
)

func (x UpdateEventDataType_Type) Enum() *UpdateEventDataType_Type {
	p := new(UpdateEventDataType_Type)
	*p = x
	return p
}

func (x UpdateEventDataType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateEventDataType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[5].Descriptor()
}

func (UpdateEventDataType_Type) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[5]
}

func (x UpdateEventDataType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateEventDataType_Type.Descriptor instead.
func (UpdateEventDataType_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{5, 0}
}

type LoginReq_LoginType int32

const (
	LoginReq_Unknown         LoginReq_LoginType = 0
	LoginReq_LoginByUsername LoginReq_LoginType = 1
	LoginReq_EmailCode       LoginReq_LoginType = 2
	LoginReq_MobileCode      LoginReq_LoginType = 3
)

// Enum value maps for LoginReq_LoginType.
var (
	LoginReq_LoginType_name = map[int32]string{
		0: "Unknown",
		1: "LoginByUsername",
		2: "EmailCode",
		3: "MobileCode",
	}
	LoginReq_LoginType_value = map[string]int32{
		"Unknown":         0,
		"LoginByUsername": 1,
		"EmailCode":       2,
		"MobileCode":      3,
	}
)

func (x LoginReq_LoginType) Enum() *LoginReq_LoginType {
	p := new(LoginReq_LoginType)
	*p = x
	return p
}

func (x LoginReq_LoginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginReq_LoginType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[6].Descriptor()
}

func (LoginReq_LoginType) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[6]
}

func (x LoginReq_LoginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginReq_LoginType.Descriptor instead.
func (LoginReq_LoginType) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{13, 0}
}

type LoginReq_PlatformType int32

const (
	LoginReq_UnknownPlatform LoginReq_PlatformType = 0
	LoginReq_Android         LoginReq_PlatformType = 1
	LoginReq_IOS             LoginReq_PlatformType = 2
	LoginReq_Windows         LoginReq_PlatformType = 3
	LoginReq_Darwin          LoginReq_PlatformType = 4
	LoginReq_Grpc            LoginReq_PlatformType = 5
	LoginReq_Web             LoginReq_PlatformType = 6
)

// Enum value maps for LoginReq_PlatformType.
var (
	LoginReq_PlatformType_name = map[int32]string{
		0: "UnknownPlatform",
		1: "Android",
		2: "IOS",
		3: "Windows",
		4: "Darwin",
		5: "Grpc",
		6: "Web",
	}
	LoginReq_PlatformType_value = map[string]int32{
		"UnknownPlatform": 0,
		"Android":         1,
		"IOS":             2,
		"Windows":         3,
		"Darwin":          4,
		"Grpc":            5,
		"Web":             6,
	}
)

func (x LoginReq_PlatformType) Enum() *LoginReq_PlatformType {
	p := new(LoginReq_PlatformType)
	*p = x
	return p
}

func (x LoginReq_PlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginReq_PlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pim_proto_enumTypes[7].Descriptor()
}

func (LoginReq_PlatformType) Type() protoreflect.EnumType {
	return &file_api_pim_proto_enumTypes[7]
}

func (x LoginReq_PlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginReq_PlatformType.Descriptor instead.
func (LoginReq_PlatformType) EnumDescriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{13, 1}
}

// =========================== 通用结构区 Begin =========================================
// 登录的Token
type TokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *TokenReq) Reset() {
	*x = TokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenReq) ProtoMessage() {}

func (x *TokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenReq.ProtoReflect.Descriptor instead.
func (*TokenReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{0}
}

func (x *TokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type StreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64 `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 使用int64 检索 可以比字符快且数据包更小
}

func (x *StreamReq) Reset() {
	*x = StreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReq) ProtoMessage() {}

func (x *StreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReq.ProtoReflect.Descriptor instead.
func (*StreamReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{1}
}

func (x *StreamReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

// 只有一个 user id 的结构 可能通用的
type UserIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64 `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 使用int64 检索 可以比字符快且数据包更小
	UserID   int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *UserIDReq) Reset() {
	*x = UserIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDReq) ProtoMessage() {}

func (x *UserIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDReq.ProtoReflect.Descriptor instead.
func (*UserIDReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{2}
}

func (x *UserIDReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *UserIDReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// 空数据 一样代表成功
type BaseOk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64 `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"` // 可以为空 特殊接口可以使用code 设置处理方法
}

func (x *BaseOk) Reset() {
	*x = BaseOk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseOk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseOk) ProtoMessage() {}

func (x *BaseOk) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseOk.ProtoReflect.Descriptor instead.
func (*BaseOk) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{3}
}

func (x *BaseOk) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 凡是和聊天相关的都会用到相同的聊天信息结构
type ChatInfoDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId         int64  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MyUserId       int64  `protobuf:"varint,2,opt,name=my_user_id,json=myUserId,proto3" json:"my_user_id,omitempty"`
	ChatName       string `protobuf:"bytes,3,opt,name=chat_name,json=chatName,proto3" json:"chat_name,omitempty"`
	ChatTitle      string `protobuf:"bytes,4,opt,name=chat_title,json=chatTitle,proto3" json:"chat_title,omitempty"`
	LastUpdateTime int64  `protobuf:"varint,5,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	LastMsgId      int64  `protobuf:"varint,6,opt,name=last_msg_id,json=lastMsgId,proto3" json:"last_msg_id,omitempty"`
}

func (x *ChatInfoDataType) Reset() {
	*x = ChatInfoDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInfoDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInfoDataType) ProtoMessage() {}

func (x *ChatInfoDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInfoDataType.ProtoReflect.Descriptor instead.
func (*ChatInfoDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{4}
}

func (x *ChatInfoDataType) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ChatInfoDataType) GetMyUserId() int64 {
	if x != nil {
		return x.MyUserId
	}
	return 0
}

func (x *ChatInfoDataType) GetChatName() string {
	if x != nil {
		return x.ChatName
	}
	return ""
}

func (x *ChatInfoDataType) GetChatTitle() string {
	if x != nil {
		return x.ChatTitle
	}
	return ""
}

func (x *ChatInfoDataType) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *ChatInfoDataType) GetLastMsgId() int64 {
	if x != nil {
		return x.LastMsgId
	}
	return 0
}

// 推送的事件信息
type UpdateEventDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type UpdateEventDataType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=api.UpdateEventDataType_Type" json:"type,omitempty"`
	// 这个body 需要通过不同的类型进行处理
	// 前期使用官方的 any 封包 , 后期使用bytes 处理
	// 使用 any 虽然方便操作 , 但是 数据包会变大很多,
	//  {
	//  "type": "NewMessage",
	//  "body": {
	//    "type_url": "type.googleapis.com/api.Message",
	//    "value": {
	//      "type": "Buffer",
	//      "data": [...]
	//    }
	//  }
	//}
	// 如果数据包很小 type_url 部分的内容占据了 大量的空间 前期开发提高效率直接使用 这个方式处理
	Body *anypb.Any `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *UpdateEventDataType) Reset() {
	*x = UpdateEventDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventDataType) ProtoMessage() {}

func (x *UpdateEventDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventDataType.ProtoReflect.Descriptor instead.
func (*UpdateEventDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateEventDataType) GetType() UpdateEventDataType_Type {
	if x != nil {
		return x.Type
	}
	return UpdateEventDataType_Unknown
}

func (x *UpdateEventDataType) GetBody() *anypb.Any {
	if x != nil {
		return x.Body
	}
	return nil
}

type UpdateGroupNewMemberDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  string NewMemberNick = 1;
	//  string MemberNick = 1; //已经说明是 新成员了 可以不需要再加New 了 , 实际情况暂时用不到这个数据
	UpdatedAt int64 `protobuf:"varint,2,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	InvitedBy int64 `protobuf:"varint,3,opt,name=InvitedBy,proto3" json:"InvitedBy,omitempty"`
	// TODO 推送新成员 也不通知对方成员的id ...
	MemberID int64 `protobuf:"varint,4,opt,name=MemberID,proto3" json:"MemberID,omitempty"`
	//  复用 消息可以再消息的数据库增加一个字段类型 , 这样 用户拉取消息的时候会客户端顺序才能再聊天框发现这个 事件
	MessageID int64 `protobuf:"varint,5,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
}

func (x *UpdateGroupNewMemberDataType) Reset() {
	*x = UpdateGroupNewMemberDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupNewMemberDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupNewMemberDataType) ProtoMessage() {}

func (x *UpdateGroupNewMemberDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupNewMemberDataType.ProtoReflect.Descriptor instead.
func (*UpdateGroupNewMemberDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateGroupNewMemberDataType) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UpdateGroupNewMemberDataType) GetInvitedBy() int64 {
	if x != nil {
		return x.InvitedBy
	}
	return 0
}

func (x *UpdateGroupNewMemberDataType) GetMemberID() int64 {
	if x != nil {
		return x.MemberID
	}
	return 0
}

func (x *UpdateGroupNewMemberDataType) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

type ConnectSuccessDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64 `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
}

func (x *ConnectSuccessDataType) Reset() {
	*x = ConnectSuccessDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectSuccessDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectSuccessDataType) ProtoMessage() {}

func (x *ConnectSuccessDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectSuccessDataType.ProtoReflect.Descriptor instead.
func (*ConnectSuccessDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectSuccessDataType) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

type ConnectFailDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectFailDataType) Reset() {
	*x = ConnectFailDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectFailDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectFailDataType) ProtoMessage() {}

func (x *ConnectFailDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectFailDataType.ProtoReflect.Descriptor instead.
func (*ConnectFailDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{8}
}

type KickDeviceDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KickDeviceDataType) Reset() {
	*x = KickDeviceDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickDeviceDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickDeviceDataType) ProtoMessage() {}

func (x *KickDeviceDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickDeviceDataType.ProtoReflect.Descriptor instead.
func (*KickDeviceDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{9}
}

type UpdateUserInfoDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfoViewerDataType `protobuf:"bytes,1,opt,name=UserInfo,proto3" json:"UserInfo,omitempty"`
}

func (x *UpdateUserInfoDataType) Reset() {
	*x = UpdateUserInfoDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoDataType) ProtoMessage() {}

func (x *UpdateUserInfoDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoDataType.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserInfoDataType) GetUserInfo() *UserInfoViewerDataType {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type NewChatInfoDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatInfo *ChatInfoDataType `protobuf:"bytes,1,opt,name=ChatInfo,proto3" json:"ChatInfo,omitempty"`
}

func (x *NewChatInfoDataType) Reset() {
	*x = NewChatInfoDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewChatInfoDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChatInfoDataType) ProtoMessage() {}

func (x *NewChatInfoDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChatInfoDataType.ProtoReflect.Descriptor instead.
func (*NewChatInfoDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{11}
}

func (x *NewChatInfoDataType) GetChatInfo() *ChatInfoDataType {
	if x != nil {
		return x.ChatInfo
	}
	return nil
}

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{12}
}

func (x *RegisterReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     LoginReq_LoginType    `protobuf:"varint,1,opt,name=Type,proto3,enum=api.LoginReq_LoginType" json:"Type,omitempty"`
	Platform LoginReq_PlatformType `protobuf:"varint,2,opt,name=Platform,proto3,enum=api.LoginReq_PlatformType" json:"Platform,omitempty"`
	Username string                `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	Password string                `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	Code     string                `protobuf:"bytes,5,opt,name=Code,proto3" json:"Code,omitempty"` //  string VerityCode = 6 ; //验证码暂时不用
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{13}
}

func (x *LoginReq) GetType() LoginReq_LoginType {
	if x != nil {
		return x.Type
	}
	return LoginReq_Unknown
}

func (x *LoginReq) GetPlatform() LoginReq_PlatformType {
	if x != nil {
		return x.Platform
	}
	return LoginReq_UnknownPlatform
}

func (x *LoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{14}
}

func (x *LoginResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserInfoViewerDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int64              `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CreatedAt  int64              `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Username   string             `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	Nick       string             `protobuf:"bytes,4,opt,name=Nick,proto3" json:"Nick,omitempty"`
	Email      string             `protobuf:"bytes,5,opt,name=Email,proto3" json:"Email,omitempty"`
	UserStatus UserStatusEnumType `protobuf:"varint,6,opt,name=UserStatus,proto3,enum=api.UserStatusEnumType" json:"UserStatus,omitempty"`
	UserType   UserTypeEnumType   `protobuf:"varint,7,opt,name=UserType,proto3,enum=api.UserTypeEnumType" json:"UserType,omitempty"`
	Avatar     []byte             `protobuf:"bytes,8,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (x *UserInfoViewerDataType) Reset() {
	*x = UserInfoViewerDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoViewerDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoViewerDataType) ProtoMessage() {}

func (x *UserInfoViewerDataType) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoViewerDataType.ProtoReflect.Descriptor instead.
func (*UserInfoViewerDataType) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{15}
}

func (x *UserInfoViewerDataType) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserInfoViewerDataType) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserInfoViewerDataType) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfoViewerDataType) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *UserInfoViewerDataType) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfoViewerDataType) GetUserStatus() UserStatusEnumType {
	if x != nil {
		return x.UserStatus
	}
	return UserStatusEnumType_UserStatusEnumTypeUnknown
}

func (x *UserInfoViewerDataType) GetUserType() UserTypeEnumType {
	if x != nil {
		return x.UserType
	}
	return UserTypeEnumType_UserTypeEnumTypeUnknown
}

func (x *UserInfoViewerDataType) GetAvatar() []byte {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type GetUserInfoByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64 `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	UserID   int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserInfoByIDReq) Reset() {
	*x = GetUserInfoByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIDReq) ProtoMessage() {}

func (x *GetUserInfoByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIDReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIDReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserInfoByIDReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *GetUserInfoByIDReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type AddUserToContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64  `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	UserID   int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Mobile   string `protobuf:"bytes,3,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	Note     string `protobuf:"bytes,4,opt,name=Note,proto3" json:"Note,omitempty"`
}

func (x *AddUserToContactReq) Reset() {
	*x = AddUserToContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserToContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToContactReq) ProtoMessage() {}

func (x *AddUserToContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToContactReq.ProtoReflect.Descriptor instead.
func (*AddUserToContactReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{17}
}

func (x *AddUserToContactReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *AddUserToContactReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddUserToContactReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AddUserToContactReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

// // chat 规则
// // 0x01020304 1234  全局用户id
// // 0x01020304 0000  公网用户id
// // 0x00000000 1234  子网用户id
// // -0x0112345678 0000 公网普通群
// // -0x0100000000 1234 私网普通群
// // -0x1012345678 0000 公网超级群
// // -0x1000000000 1234 私网超级群
// ChatID           int64             `json:"chat_id"` // 普通用户正数 ， 群负数 超级群 -100开头
// MsgType          int               `json:"msg_type"`
// Attach           []byte            `json:"attach"`
// Body             []byte            `json:"body"`
// AtUser           []int64           `json:"at_user"`
// ReplyToMessageID int64             `json:"reply_to_message_id"`
// ReplyInChatID    int64             `json:"reply_in_chat_id"`
// Params           map[string]string `json:"params"`
type SendMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID         int64  `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	ChatID           int64  `protobuf:"varint,2,opt,name=ChatID,proto3" json:"ChatID,omitempty"`
	ReplyToMessageID int64  `protobuf:"varint,3,opt,name=ReplyToMessageID,proto3" json:"ReplyToMessageID,omitempty"`
	ReplyInChatID    int64  `protobuf:"varint,4,opt,name=ReplyInChatID,proto3" json:"ReplyInChatID,omitempty"`
	MessageText      string `protobuf:"bytes,5,opt,name=MessageText,proto3" json:"MessageText,omitempty"` // 这是文本消息 每个消息都会有文本的部分
	// Attach 被拆分成不同不同的子类型
	ImageContent *MessageTypeImage `protobuf:"bytes,6,opt,name=ImageContent,proto3,oneof" json:"ImageContent,omitempty"` // 可选类型 当消息类型是图片的时候会有图片信息
	//  map<string, string > Params = 7 ;
	Params *anypb.Any      `protobuf:"bytes,7,opt,name=Params,proto3" json:"Params,omitempty"` // 使用泛型
	Type   MessageTypeEnum `protobuf:"varint,8,opt,name=Type,proto3,enum=api.MessageTypeEnum" json:"Type,omitempty"`
	AtUser []int64         `protobuf:"varint,9,rep,packed,name=AtUser,proto3" json:"AtUser,omitempty"`
}

func (x *SendMessageReq) Reset() {
	*x = SendMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageReq) ProtoMessage() {}

func (x *SendMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageReq.ProtoReflect.Descriptor instead.
func (*SendMessageReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{18}
}

func (x *SendMessageReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *SendMessageReq) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *SendMessageReq) GetReplyToMessageID() int64 {
	if x != nil {
		return x.ReplyToMessageID
	}
	return 0
}

func (x *SendMessageReq) GetReplyInChatID() int64 {
	if x != nil {
		return x.ReplyInChatID
	}
	return 0
}

func (x *SendMessageReq) GetMessageText() string {
	if x != nil {
		return x.MessageText
	}
	return ""
}

func (x *SendMessageReq) GetImageContent() *MessageTypeImage {
	if x != nil {
		return x.ImageContent
	}
	return nil
}

func (x *SendMessageReq) GetParams() *anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SendMessageReq) GetType() MessageTypeEnum {
	if x != nil {
		return x.Type
	}
	return MessageTypeEnum_MessageTypeUnknown
}

func (x *SendMessageReq) GetAtUser() []int64 {
	if x != nil {
		return x.AtUser
	}
	return nil
}

type MessageTypeImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  int64 RemoteFileID = 1 ; // 远程的id
	ImageBuffer []byte `protobuf:"bytes,1,opt,name=ImageBuffer,proto3" json:"ImageBuffer,omitempty"` // 先只有buffer
}

func (x *MessageTypeImage) Reset() {
	*x = MessageTypeImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTypeImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTypeImage) ProtoMessage() {}

func (x *MessageTypeImage) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTypeImage.ProtoReflect.Descriptor instead.
func (*MessageTypeImage) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{19}
}

func (x *MessageTypeImage) GetImageBuffer() []byte {
	if x != nil {
		return x.ImageBuffer
	}
	return nil
}

// 消息数据类型
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ChatID           int64  `protobuf:"varint,2,opt,name=ChatID,proto3" json:"ChatID,omitempty"`
	ReplyToMessageID int64  `protobuf:"varint,3,opt,name=ReplyToMessageID,proto3" json:"ReplyToMessageID,omitempty"`
	ReplyInChatID    int64  `protobuf:"varint,4,opt,name=ReplyInChatID,proto3" json:"ReplyInChatID,omitempty"`
	MessageText      string `protobuf:"bytes,5,opt,name=MessageText,proto3" json:"MessageText,omitempty"` // 这是文本消息 每个消息都会有文本的部分
	// Attach 被拆分成不同不同的子类型
	ImageContent *MessageTypeImage `protobuf:"bytes,6,opt,name=ImageContent,proto3,oneof" json:"ImageContent,omitempty"` // 可选类型 当消息类型是图片的时候会有图片信息
	//  map<string, string > Params = 7 ;
	Params    *anypb.Any        `protobuf:"bytes,7,opt,name=Params,proto3" json:"Params,omitempty"` // 使用泛型
	Type      MessageTypeEnum   `protobuf:"varint,8,opt,name=Type,proto3,enum=api.MessageTypeEnum" json:"Type,omitempty"`
	AtUser    []int64           `protobuf:"varint,9,rep,packed,name=AtUser,proto3" json:"AtUser,omitempty"`
	CreatedAt int64             `protobuf:"varint,10,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt int64             `protobuf:"varint,11,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Sender    int64             `protobuf:"varint,12,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Status    MessageStatusEnum `protobuf:"varint,13,opt,name=Status,proto3,enum=api.MessageStatusEnum" json:"Status,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{20}
}

func (x *Message) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Message) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *Message) GetReplyToMessageID() int64 {
	if x != nil {
		return x.ReplyToMessageID
	}
	return 0
}

func (x *Message) GetReplyInChatID() int64 {
	if x != nil {
		return x.ReplyInChatID
	}
	return 0
}

func (x *Message) GetMessageText() string {
	if x != nil {
		return x.MessageText
	}
	return ""
}

func (x *Message) GetImageContent() *MessageTypeImage {
	if x != nil {
		return x.ImageContent
	}
	return nil
}

func (x *Message) GetParams() *anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Message) GetType() MessageTypeEnum {
	if x != nil {
		return x.Type
	}
	return MessageTypeEnum_MessageTypeUnknown
}

func (x *Message) GetAtUser() []int64 {
	if x != nil {
		return x.AtUser
	}
	return nil
}

func (x *Message) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Message) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Message) GetSender() int64 {
	if x != nil {
		return x.Sender
	}
	return 0
}

func (x *Message) GetStatus() MessageStatusEnum {
	if x != nil {
		return x.Status
	}
	return MessageStatusEnum_MessageStatusUnknown
}

type SendMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *SendMessageResp) Reset() {
	*x = SendMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResp) ProtoMessage() {}

func (x *SendMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResp.ProtoReflect.Descriptor instead.
func (*SendMessageResp) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{21}
}

func (x *SendMessageResp) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64   `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	Name     string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Members  []int64 `protobuf:"varint,3,rep,packed,name=Members,proto3" json:"Members,omitempty"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{22}
}

func (x *CreateGroupReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *CreateGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupReq) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

type CreateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID int64 `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (x *CreateGroupResp) Reset() {
	*x = CreateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResp) ProtoMessage() {}

func (x *CreateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResp.ProtoReflect.Descriptor instead.
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{23}
}

func (x *CreateGroupResp) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type GroupJoinByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64 `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	GroupID  int64 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (x *GroupJoinByIDReq) Reset() {
	*x = GroupJoinByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupJoinByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupJoinByIDReq) ProtoMessage() {}

func (x *GroupJoinByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupJoinByIDReq.ProtoReflect.Descriptor instead.
func (*GroupJoinByIDReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{24}
}

func (x *GroupJoinByIDReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *GroupJoinByIDReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type GroupInviteMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64   `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	GroupID  int64   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Members  []int64 `protobuf:"varint,3,rep,packed,name=Members,proto3" json:"Members,omitempty"`
}

func (x *GroupInviteMembersReq) Reset() {
	*x = GroupInviteMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInviteMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInviteMembersReq) ProtoMessage() {}

func (x *GroupInviteMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInviteMembersReq.ProtoReflect.Descriptor instead.
func (*GroupInviteMembersReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{25}
}

func (x *GroupInviteMembersReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *GroupInviteMembersReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupInviteMembersReq) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

type GroupEditNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID     int64  `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	GroupID      int64  `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Notification string `protobuf:"bytes,3,opt,name=Notification,proto3" json:"Notification,omitempty"`
}

func (x *GroupEditNotificationReq) Reset() {
	*x = GroupEditNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupEditNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupEditNotificationReq) ProtoMessage() {}

func (x *GroupEditNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupEditNotificationReq.ProtoReflect.Descriptor instead.
func (*GroupEditNotificationReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{26}
}

func (x *GroupEditNotificationReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *GroupEditNotificationReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupEditNotificationReq) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

type GroupRemoveMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64   `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	GroupID  int64   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Members  []int64 `protobuf:"varint,3,rep,packed,name=Members,proto3" json:"Members,omitempty"`
}

func (x *GroupRemoveMembersReq) Reset() {
	*x = GroupRemoveMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRemoveMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRemoveMembersReq) ProtoMessage() {}

func (x *GroupRemoveMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRemoveMembersReq.ProtoReflect.Descriptor instead.
func (*GroupRemoveMembersReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{27}
}

func (x *GroupRemoveMembersReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *GroupRemoveMembersReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupRemoveMembersReq) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

type UserUpdateInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamID int64   `protobuf:"varint,1,opt,name=StreamID,proto3" json:"StreamID,omitempty"` // 这是必须的
	Username *string `protobuf:"bytes,2,opt,name=Username,proto3,oneof" json:"Username,omitempty"`
	Nick     *string `protobuf:"bytes,3,opt,name=Nick,proto3,oneof" json:"Nick,omitempty"`
	Avatar   []byte  `protobuf:"bytes,4,opt,name=Avatar,proto3,oneof" json:"Avatar,omitempty"`
}

func (x *UserUpdateInfoReq) Reset() {
	*x = UserUpdateInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pim_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdateInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdateInfoReq) ProtoMessage() {}

func (x *UserUpdateInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_pim_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdateInfoReq.ProtoReflect.Descriptor instead.
func (*UserUpdateInfoReq) Descriptor() ([]byte, []int) {
	return file_api_pim_proto_rawDescGZIP(), []int{28}
}

func (x *UserUpdateInfoReq) GetStreamID() int64 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *UserUpdateInfoReq) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UserUpdateInfoReq) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *UserUpdateInfoReq) GetAvatar() []byte {
	if x != nil {
		return x.Avatar
	}
	return nil
}

var File_api_pim_proto protoreflect.FileDescriptor

var file_api_pim_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x20, 0x0a, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x27, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x3f, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x06, 0x42,
	0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x7d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x65,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x69,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x06, 0x22,
	0x94, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4b, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x13,
	0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0xf0, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x4c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x22,
	0x65, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x61, 0x72, 0x77, 0x69,
	0x6e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x72, 0x70, 0x63, 0x10, 0x05, 0x12, 0x07, 0x0a,
	0x03, 0x57, 0x65, 0x62, 0x10, 0x06, 0x22, 0x21, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x16, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x37, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x22, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x75,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x6f, 0x74, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x41, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x34, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xea, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x41, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x22, 0x48, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x15, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x74, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x64, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x15, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x69, 0x63,
	0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2a, 0x33, 0x0a, 0x12,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x2a, 0x2f, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x2a, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x2a, 0x9a, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x65, 0x12, 0x26, 0x0a, 0x22,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x66, 0x2a, 0x8b, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x6b, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x10, 0x04, 0x32, 0xa5, 0x07, 0x0a, 0x09, 0x50, 0x69, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x30, 0x01, 0x12, 0x29, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12, 0x26, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x12, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12,
	0x39, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12, 0x35, 0x0a, 0x0e, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f,
	0x6b, 0x12, 0x37, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x43, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a,
	0x6f, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12, 0x3d, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12, 0x43, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x64, 0x69, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6b, 0x12, 0x3d, 0x0a, 0x12, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x6b, 0x42, 0x06, 0x5a, 0x04, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_pim_proto_rawDescOnce sync.Once
	file_api_pim_proto_rawDescData = file_api_pim_proto_rawDesc
)

func file_api_pim_proto_rawDescGZIP() []byte {
	file_api_pim_proto_rawDescOnce.Do(func() {
		file_api_pim_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_pim_proto_rawDescData)
	})
	return file_api_pim_proto_rawDescData
}

var file_api_pim_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_pim_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_api_pim_proto_goTypes = []interface{}{
	(UserStatusEnumType)(0),              // 0: api.UserStatusEnumType
	(UserTypeEnumType)(0),                // 1: api.UserTypeEnumType
	(GroupMemberUserEnumType)(0),         // 2: api.GroupMemberUserEnumType
	(MessageTypeEnum)(0),                 // 3: api.MessageTypeEnum
	(MessageStatusEnum)(0),               // 4: api.MessageStatusEnum
	(UpdateEventDataType_Type)(0),        // 5: api.UpdateEventDataType.Type
	(LoginReq_LoginType)(0),              // 6: api.LoginReq.LoginType
	(LoginReq_PlatformType)(0),           // 7: api.LoginReq.PlatformType
	(*TokenReq)(nil),                     // 8: api.TokenReq
	(*StreamReq)(nil),                    // 9: api.StreamReq
	(*UserIDReq)(nil),                    // 10: api.UserIDReq
	(*BaseOk)(nil),                       // 11: api.BaseOk
	(*ChatInfoDataType)(nil),             // 12: api.ChatInfoDataType
	(*UpdateEventDataType)(nil),          // 13: api.UpdateEventDataType
	(*UpdateGroupNewMemberDataType)(nil), // 14: api.UpdateGroupNewMemberDataType
	(*ConnectSuccessDataType)(nil),       // 15: api.ConnectSuccessDataType
	(*ConnectFailDataType)(nil),          // 16: api.ConnectFailDataType
	(*KickDeviceDataType)(nil),           // 17: api.KickDeviceDataType
	(*UpdateUserInfoDataType)(nil),       // 18: api.UpdateUserInfoDataType
	(*NewChatInfoDataType)(nil),          // 19: api.NewChatInfoDataType
	(*RegisterReq)(nil),                  // 20: api.RegisterReq
	(*LoginReq)(nil),                     // 21: api.LoginReq
	(*LoginResp)(nil),                    // 22: api.LoginResp
	(*UserInfoViewerDataType)(nil),       // 23: api.UserInfoViewerDataType
	(*GetUserInfoByIDReq)(nil),           // 24: api.GetUserInfoByIDReq
	(*AddUserToContactReq)(nil),          // 25: api.AddUserToContactReq
	(*SendMessageReq)(nil),               // 26: api.SendMessageReq
	(*MessageTypeImage)(nil),             // 27: api.MessageTypeImage
	(*Message)(nil),                      // 28: api.Message
	(*SendMessageResp)(nil),              // 29: api.SendMessageResp
	(*CreateGroupReq)(nil),               // 30: api.CreateGroupReq
	(*CreateGroupResp)(nil),              // 31: api.CreateGroupResp
	(*GroupJoinByIDReq)(nil),             // 32: api.GroupJoinByIDReq
	(*GroupInviteMembersReq)(nil),        // 33: api.GroupInviteMembersReq
	(*GroupEditNotificationReq)(nil),     // 34: api.GroupEditNotificationReq
	(*GroupRemoveMembersReq)(nil),        // 35: api.GroupRemoveMembersReq
	(*UserUpdateInfoReq)(nil),            // 36: api.UserUpdateInfoReq
	(*anypb.Any)(nil),                    // 37: google.protobuf.Any
}
var file_api_pim_proto_depIdxs = []int32{
	5,  // 0: api.UpdateEventDataType.type:type_name -> api.UpdateEventDataType.Type
	37, // 1: api.UpdateEventDataType.body:type_name -> google.protobuf.Any
	23, // 2: api.UpdateUserInfoDataType.UserInfo:type_name -> api.UserInfoViewerDataType
	12, // 3: api.NewChatInfoDataType.ChatInfo:type_name -> api.ChatInfoDataType
	6,  // 4: api.LoginReq.Type:type_name -> api.LoginReq.LoginType
	7,  // 5: api.LoginReq.Platform:type_name -> api.LoginReq.PlatformType
	0,  // 6: api.UserInfoViewerDataType.UserStatus:type_name -> api.UserStatusEnumType
	1,  // 7: api.UserInfoViewerDataType.UserType:type_name -> api.UserTypeEnumType
	27, // 8: api.SendMessageReq.ImageContent:type_name -> api.MessageTypeImage
	37, // 9: api.SendMessageReq.Params:type_name -> google.protobuf.Any
	3,  // 10: api.SendMessageReq.Type:type_name -> api.MessageTypeEnum
	27, // 11: api.Message.ImageContent:type_name -> api.MessageTypeImage
	37, // 12: api.Message.Params:type_name -> google.protobuf.Any
	3,  // 13: api.Message.Type:type_name -> api.MessageTypeEnum
	4,  // 14: api.Message.Status:type_name -> api.MessageStatusEnum
	8,  // 15: api.PimServer.UpdateEvent:input_type -> api.TokenReq
	20, // 16: api.PimServer.Register:input_type -> api.RegisterReq
	21, // 17: api.PimServer.Login:input_type -> api.LoginReq
	9,  // 18: api.PimServer.GetMyUserInfo:input_type -> api.StreamReq
	24, // 19: api.PimServer.GetUserInfoByID:input_type -> api.GetUserInfoByIDReq
	25, // 20: api.PimServer.AddUserToContact:input_type -> api.AddUserToContactReq
	36, // 21: api.PimServer.UserUpdateUsername:input_type -> api.UserUpdateInfoReq
	36, // 22: api.PimServer.UserUpdateNick:input_type -> api.UserUpdateInfoReq
	36, // 23: api.PimServer.UserUpdateAvatar:input_type -> api.UserUpdateInfoReq
	26, // 24: api.PimServer.SendMessage:input_type -> api.SendMessageReq
	10, // 25: api.PimServer.CrateChat:input_type -> api.UserIDReq
	30, // 26: api.PimServer.CreateGroup:input_type -> api.CreateGroupReq
	32, // 27: api.PimServer.GroupJoinByID:input_type -> api.GroupJoinByIDReq
	33, // 28: api.PimServer.GroupInviteMembers:input_type -> api.GroupInviteMembersReq
	34, // 29: api.PimServer.GroupEditNotification:input_type -> api.GroupEditNotificationReq
	35, // 30: api.PimServer.GroupRemoveMembers:input_type -> api.GroupRemoveMembersReq
	13, // 31: api.PimServer.UpdateEvent:output_type -> api.UpdateEventDataType
	11, // 32: api.PimServer.Register:output_type -> api.BaseOk
	22, // 33: api.PimServer.Login:output_type -> api.LoginResp
	23, // 34: api.PimServer.GetMyUserInfo:output_type -> api.UserInfoViewerDataType
	23, // 35: api.PimServer.GetUserInfoByID:output_type -> api.UserInfoViewerDataType
	11, // 36: api.PimServer.AddUserToContact:output_type -> api.BaseOk
	11, // 37: api.PimServer.UserUpdateUsername:output_type -> api.BaseOk
	11, // 38: api.PimServer.UserUpdateNick:output_type -> api.BaseOk
	11, // 39: api.PimServer.UserUpdateAvatar:output_type -> api.BaseOk
	29, // 40: api.PimServer.SendMessage:output_type -> api.SendMessageResp
	12, // 41: api.PimServer.CrateChat:output_type -> api.ChatInfoDataType
	31, // 42: api.PimServer.CreateGroup:output_type -> api.CreateGroupResp
	11, // 43: api.PimServer.GroupJoinByID:output_type -> api.BaseOk
	11, // 44: api.PimServer.GroupInviteMembers:output_type -> api.BaseOk
	11, // 45: api.PimServer.GroupEditNotification:output_type -> api.BaseOk
	11, // 46: api.PimServer.GroupRemoveMembers:output_type -> api.BaseOk
	31, // [31:47] is the sub-list for method output_type
	15, // [15:31] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_pim_proto_init() }
func file_api_pim_proto_init() {
	if File_api_pim_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_pim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseOk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInfoDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupNewMemberDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectSuccessDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectFailDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickDeviceDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewChatInfoDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoViewerDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserToContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTypeImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupJoinByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInviteMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupEditNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRemoveMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pim_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdateInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_pim_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_api_pim_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_api_pim_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_pim_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_pim_proto_goTypes,
		DependencyIndexes: file_api_pim_proto_depIdxs,
		EnumInfos:         file_api_pim_proto_enumTypes,
		MessageInfos:      file_api_pim_proto_msgTypes,
	}.Build()
	File_api_pim_proto = out.File
	file_api_pim_proto_rawDesc = nil
	file_api_pim_proto_goTypes = nil
	file_api_pim_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PimServerClient is the client API for PimServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PimServerClient interface {
	//  通知事件模块
	UpdateEvent(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (PimServer_UpdateEventClient, error)
	//  鉴权模块
	//  注册用户
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*BaseOk, error)
	//  登录换取token
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	//   用户模块
	//  获取我的用户信息
	GetMyUserInfo(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*UserInfoViewerDataType, error)
	//  通过id 获取用户信息
	GetUserInfoByID(ctx context.Context, in *GetUserInfoByIDReq, opts ...grpc.CallOption) (*UserInfoViewerDataType, error)
	//  添加用户到通讯录
	AddUserToContact(ctx context.Context, in *AddUserToContactReq, opts ...grpc.CallOption) (*BaseOk, error)
	//  修改用户名
	UserUpdateUsername(ctx context.Context, in *UserUpdateInfoReq, opts ...grpc.CallOption) (*BaseOk, error)
	UserUpdateNick(ctx context.Context, in *UserUpdateInfoReq, opts ...grpc.CallOption) (*BaseOk, error)
	UserUpdateAvatar(ctx context.Context, in *UserUpdateInfoReq, opts ...grpc.CallOption) (*BaseOk, error)
	// 消息模块
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
	// 创建一个聊天 到聊天列表
	CrateChat(ctx context.Context, in *UserIDReq, opts ...grpc.CallOption) (*ChatInfoDataType, error)
	//   创建群
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	// 通过群id 入群
	GroupJoinByID(ctx context.Context, in *GroupJoinByIDReq, opts ...grpc.CallOption) (*BaseOk, error)
	//  邀请新成员
	GroupInviteMembers(ctx context.Context, in *GroupInviteMembersReq, opts ...grpc.CallOption) (*BaseOk, error)
	// 修改群通知
	GroupEditNotification(ctx context.Context, in *GroupEditNotificationReq, opts ...grpc.CallOption) (*BaseOk, error)
	//  移除群成员
	GroupRemoveMembers(ctx context.Context, in *GroupRemoveMembersReq, opts ...grpc.CallOption) (*BaseOk, error)
}

type pimServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPimServerClient(cc grpc.ClientConnInterface) PimServerClient {
	return &pimServerClient{cc}
}

func (c *pimServerClient) UpdateEvent(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (PimServer_UpdateEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PimServer_serviceDesc.Streams[0], "/api.PimServer/UpdateEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &pimServerUpdateEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PimServer_UpdateEventClient interface {
	Recv() (*UpdateEventDataType, error)
	grpc.ClientStream
}

type pimServerUpdateEventClient struct {
	grpc.ClientStream
}

func (x *pimServerUpdateEventClient) Recv() (*UpdateEventDataType, error) {
	m := new(UpdateEventDataType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pimServerClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/api.PimServer/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) GetMyUserInfo(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*UserInfoViewerDataType, error) {
	out := new(UserInfoViewerDataType)
	err := c.cc.Invoke(ctx, "/api.PimServer/GetMyUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) GetUserInfoByID(ctx context.Context, in *GetUserInfoByIDReq, opts ...grpc.CallOption) (*UserInfoViewerDataType, error) {
	out := new(UserInfoViewerDataType)
	err := c.cc.Invoke(ctx, "/api.PimServer/GetUserInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) AddUserToContact(ctx context.Context, in *AddUserToContactReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/AddUserToContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) UserUpdateUsername(ctx context.Context, in *UserUpdateInfoReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/UserUpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) UserUpdateNick(ctx context.Context, in *UserUpdateInfoReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/UserUpdateNick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) UserUpdateAvatar(ctx context.Context, in *UserUpdateInfoReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/UserUpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, "/api.PimServer/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) CrateChat(ctx context.Context, in *UserIDReq, opts ...grpc.CallOption) (*ChatInfoDataType, error) {
	out := new(ChatInfoDataType)
	err := c.cc.Invoke(ctx, "/api.PimServer/CrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, "/api.PimServer/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) GroupJoinByID(ctx context.Context, in *GroupJoinByIDReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/GroupJoinByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) GroupInviteMembers(ctx context.Context, in *GroupInviteMembersReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/GroupInviteMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) GroupEditNotification(ctx context.Context, in *GroupEditNotificationReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/GroupEditNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServerClient) GroupRemoveMembers(ctx context.Context, in *GroupRemoveMembersReq, opts ...grpc.CallOption) (*BaseOk, error) {
	out := new(BaseOk)
	err := c.cc.Invoke(ctx, "/api.PimServer/GroupRemoveMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PimServerServer is the server API for PimServer service.
type PimServerServer interface {
	//  通知事件模块
	UpdateEvent(*TokenReq, PimServer_UpdateEventServer) error
	//  鉴权模块
	//  注册用户
	Register(context.Context, *RegisterReq) (*BaseOk, error)
	//  登录换取token
	Login(context.Context, *LoginReq) (*LoginResp, error)
	//   用户模块
	//  获取我的用户信息
	GetMyUserInfo(context.Context, *StreamReq) (*UserInfoViewerDataType, error)
	//  通过id 获取用户信息
	GetUserInfoByID(context.Context, *GetUserInfoByIDReq) (*UserInfoViewerDataType, error)
	//  添加用户到通讯录
	AddUserToContact(context.Context, *AddUserToContactReq) (*BaseOk, error)
	//  修改用户名
	UserUpdateUsername(context.Context, *UserUpdateInfoReq) (*BaseOk, error)
	UserUpdateNick(context.Context, *UserUpdateInfoReq) (*BaseOk, error)
	UserUpdateAvatar(context.Context, *UserUpdateInfoReq) (*BaseOk, error)
	// 消息模块
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	// 创建一个聊天 到聊天列表
	CrateChat(context.Context, *UserIDReq) (*ChatInfoDataType, error)
	//   创建群
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	// 通过群id 入群
	GroupJoinByID(context.Context, *GroupJoinByIDReq) (*BaseOk, error)
	//  邀请新成员
	GroupInviteMembers(context.Context, *GroupInviteMembersReq) (*BaseOk, error)
	// 修改群通知
	GroupEditNotification(context.Context, *GroupEditNotificationReq) (*BaseOk, error)
	//  移除群成员
	GroupRemoveMembers(context.Context, *GroupRemoveMembersReq) (*BaseOk, error)
}

// UnimplementedPimServerServer can be embedded to have forward compatible implementations.
type UnimplementedPimServerServer struct {
}

func (*UnimplementedPimServerServer) UpdateEvent(*TokenReq, PimServer_UpdateEventServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (*UnimplementedPimServerServer) Register(context.Context, *RegisterReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedPimServerServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedPimServerServer) GetMyUserInfo(context.Context, *StreamReq) (*UserInfoViewerDataType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserInfo not implemented")
}
func (*UnimplementedPimServerServer) GetUserInfoByID(context.Context, *GetUserInfoByIDReq) (*UserInfoViewerDataType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByID not implemented")
}
func (*UnimplementedPimServerServer) AddUserToContact(context.Context, *AddUserToContactReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToContact not implemented")
}
func (*UnimplementedPimServerServer) UserUpdateUsername(context.Context, *UserUpdateInfoReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateUsername not implemented")
}
func (*UnimplementedPimServerServer) UserUpdateNick(context.Context, *UserUpdateInfoReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateNick not implemented")
}
func (*UnimplementedPimServerServer) UserUpdateAvatar(context.Context, *UserUpdateInfoReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateAvatar not implemented")
}
func (*UnimplementedPimServerServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedPimServerServer) CrateChat(context.Context, *UserIDReq) (*ChatInfoDataType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrateChat not implemented")
}
func (*UnimplementedPimServerServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedPimServerServer) GroupJoinByID(context.Context, *GroupJoinByIDReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupJoinByID not implemented")
}
func (*UnimplementedPimServerServer) GroupInviteMembers(context.Context, *GroupInviteMembersReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInviteMembers not implemented")
}
func (*UnimplementedPimServerServer) GroupEditNotification(context.Context, *GroupEditNotificationReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupEditNotification not implemented")
}
func (*UnimplementedPimServerServer) GroupRemoveMembers(context.Context, *GroupRemoveMembersReq) (*BaseOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRemoveMembers not implemented")
}

func RegisterPimServerServer(s *grpc.Server, srv PimServerServer) {
	s.RegisterService(&_PimServer_serviceDesc, srv)
}

func _PimServer_UpdateEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PimServerServer).UpdateEvent(m, &pimServerUpdateEventServer{stream})
}

type PimServer_UpdateEventServer interface {
	Send(*UpdateEventDataType) error
	grpc.ServerStream
}

type pimServerUpdateEventServer struct {
	grpc.ServerStream
}

func (x *pimServerUpdateEventServer) Send(m *UpdateEventDataType) error {
	return x.ServerStream.SendMsg(m)
}

func _PimServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_GetMyUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).GetMyUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/GetMyUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).GetMyUserInfo(ctx, req.(*StreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_GetUserInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).GetUserInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/GetUserInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).GetUserInfoByID(ctx, req.(*GetUserInfoByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_AddUserToContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).AddUserToContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/AddUserToContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).AddUserToContact(ctx, req.(*AddUserToContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_UserUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).UserUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/UserUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).UserUpdateUsername(ctx, req.(*UserUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_UserUpdateNick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).UserUpdateNick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/UserUpdateNick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).UserUpdateNick(ctx, req.(*UserUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_UserUpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).UserUpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/UserUpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).UserUpdateAvatar(ctx, req.(*UserUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_CrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).CrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/CrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).CrateChat(ctx, req.(*UserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_GroupJoinByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupJoinByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).GroupJoinByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/GroupJoinByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).GroupJoinByID(ctx, req.(*GroupJoinByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_GroupInviteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).GroupInviteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/GroupInviteMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).GroupInviteMembers(ctx, req.(*GroupInviteMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_GroupEditNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupEditNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).GroupEditNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/GroupEditNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).GroupEditNotification(ctx, req.(*GroupEditNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimServer_GroupRemoveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRemoveMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServerServer).GroupRemoveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PimServer/GroupRemoveMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServerServer).GroupRemoveMembers(ctx, req.(*GroupRemoveMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PimServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PimServer",
	HandlerType: (*PimServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PimServer_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PimServer_Login_Handler,
		},
		{
			MethodName: "GetMyUserInfo",
			Handler:    _PimServer_GetMyUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoByID",
			Handler:    _PimServer_GetUserInfoByID_Handler,
		},
		{
			MethodName: "AddUserToContact",
			Handler:    _PimServer_AddUserToContact_Handler,
		},
		{
			MethodName: "UserUpdateUsername",
			Handler:    _PimServer_UserUpdateUsername_Handler,
		},
		{
			MethodName: "UserUpdateNick",
			Handler:    _PimServer_UserUpdateNick_Handler,
		},
		{
			MethodName: "UserUpdateAvatar",
			Handler:    _PimServer_UserUpdateAvatar_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _PimServer_SendMessage_Handler,
		},
		{
			MethodName: "CrateChat",
			Handler:    _PimServer_CrateChat_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _PimServer_CreateGroup_Handler,
		},
		{
			MethodName: "GroupJoinByID",
			Handler:    _PimServer_GroupJoinByID_Handler,
		},
		{
			MethodName: "GroupInviteMembers",
			Handler:    _PimServer_GroupInviteMembers_Handler,
		},
		{
			MethodName: "GroupEditNotification",
			Handler:    _PimServer_GroupEditNotification_Handler,
		},
		{
			MethodName: "GroupRemoveMembers",
			Handler:    _PimServer_GroupRemoveMembers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateEvent",
			Handler:       _PimServer_UpdateEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/pim.proto",
}
